/*
Given an array strings, determine whether it follows the sequence given in the patterns array. In other words, there should be no i and j for which strings[i] = strings[j] and patterns[i] ≠ patterns[j] or for which strings[i] ≠ strings[j] and patterns[i] = patterns[j].

Example

For strings = ["cat", "dog", "dog"] and patterns = ["a", "b", "b"], the output should be
areFollowingPatterns(strings, patterns) = true;
For strings = ["cat", "dog", "doggy"] and patterns = ["a", "b", "b"], the output should be
areFollowingPatterns(strings, patterns) = false.
Input/Output

[execution time limit] 3 seconds (java)

[input] array.string strings

An array of strings, each containing only lowercase English letters.

Guaranteed constraints:
1 ≤ strings.length ≤ 105,
1 ≤ strings[i].length ≤ 10.

[input] array.string patterns

An array of pattern strings, each containing only lowercase English letters.

Guaranteed constraints:
patterns.length = strings.length,
1 ≤ patterns[i].length ≤ 10.

[output] boolean

Return true if strings follows patterns and false otherwise.
*/


boolean areFollowingPatterns(String[] strings, String[] patterns) {

    // for(int i = 0; i < strings.length - 1; i++){
    //     if(strings[i].equals(strings[i+1]) != patterns[i].equals(patterns[i+1])){
    //         return false;
    //     }
    // }
    
    // Map<String, String> map = new HashMap<>();
    // for(int i=0; i< strings.length; i++){
    //     if(map.containsKey(patterns[i])){
    //         if(!map.get(patterns[i]).equals(strings[i])) return false;
    //     }else if(map.containsValue(strings[i])){
    //         return false;
    //     }
    //     map.put(patterns[i], strings[i]);
    // }
    
    HashSet set1 = new HashSet();
    HashSet set2 = new HashSet();
    for(int i=0; i<strings.length;i++){
        boolean added = set1.add(strings[i]);  
        boolean added1 = set2.add(patterns[i]);
        if(added != added1){
                return false;
        }
    }
    return true;
}

/*
Given a string s consisting of small English letters, find and return the first instance of a non-repeating character in it. If there is no such character, return '_'.

Example

For s = "abacabad", the output should be
firstNotRepeatingCharacter(s) = 'c'.

There are 2 non-repeating characters in the string: 'c' and 'd'. Return c since it appears in the string first.

For s = "abacabaabacaba", the output should be
firstNotRepeatingCharacter(s) = '_'.

There are no characters in this string that do not repeat.

Input/Output

[execution time limit] 3 seconds (java)

[input] string s

A string that contains only lowercase English letters.

Guaranteed constraints:
1 ≤ s.length ≤ 105.

[output] char

The first non-repeating character in s, or '_' if there are no characters that do not repeat.
*/

//0(n) space
char firstNotRepeatingCharacter(String s) {
    char[] c=s.toCharArray();
    for(int i=0;i<s.length();i++){
        if(s.indexOf(c[i])==s.lastIndexOf(c[i]))
            return c[i];
    }
    return '_';
}

//0(2n)
char firstNotRepeatingCharacter(String s) {
    Queue<Character> tempset = new LinkedList<>();
    HashSet<Character> dont = new HashSet<>();
    int index = -1;
    
    for(int i = 0; i < s.length(); i++){
        if(!dont.contains(s.charAt(i))){
            tempset.add(s.charAt(i));
            dont.add(s.charAt(i));
            index = i;
        }
        else{
            tempset.remove((char)s.charAt(i));
        }
    }
    if(tempset.isEmpty() || index == -1){return '_';}
    else{return tempset.poll();}
}

/*
Note: Try to solve this task in O(n) time using O(1) additional space, where n is the number of elements in l, since this is what you'll be asked to do during an interview.

Given a singly linked list of integers, determine whether or not it's a palindrome.

Note: in examples below and tests preview linked lists are presented as arrays just for simplicity of visualization: in real data you will be given a head node l of the linked list

Example

For l = [0, 1, 0], the output should be
isListPalindrome(l) = true;

For l = [1, 2, 2, 3], the output should be
isListPalindrome(l) = false.

Input/Output

[execution time limit] 3 seconds (java)

[input] linkedlist.integer l

A singly linked list of integers.

Guaranteed constraints:
0 ≤ list size ≤ 5 · 105,
-109 ≤ element value ≤ 109.

[output] boolean

Return true if l is a palindrome, otherwise return false.
*/

// Singly-linked lists are already defined with this interface:
// class ListNode<T> {
//   ListNode(T x) {
//     value = x;
//   }
//   T value;
//   ListNode<T> next;
// }
//

boolean isListPalindrome(ListNode<Integer> l) {
    ListNode<Integer> slow = l;
    ListNode<Integer> fast = l;
    
    while(fast != null && fast.next != null){
        fast = fast.next.next;
        slow = slow.next;
    }
    
    slow = reverse(slow);
    fast = l;
    
    while(slow != null){
        if(!slow.value.equals(fast.value)){
            return false;
        }
        
        slow = slow.next;
        fast = fast.next;
    }
    
    return true;
}

public ListNode<Integer> reverse(ListNode<Integer> head){
    ListNode<Integer> prev = null;
    while(head != null){
        ListNode<Integer> next = head.next;
        head.next = prev;
        prev = head;
        head = next;
    }
    return prev;
}



/*
You're given 2 huge integers represented by linked lists. Each linked list element is a number from 0 to 9999 that represents a number with exactly 4 digits. The represented number might have leading zeros. Your task is to add up these huge integers and return the result in the same format.

Example

For a = [9876, 5432, 1999] and b = [1, 8001], the output should be
addTwoHugeNumbers(a, b) = [9876, 5434, 0].

Explanation: 987654321999 + 18001 = 987654340000.

For a = [123, 4, 5] and b = [100, 100, 100], the output should be
addTwoHugeNumbers(a, b) = [223, 104, 105].

Explanation: 12300040005 + 10001000100 = 22301040105.

Input/Output

[execution time limit] 3 seconds (java)

[input] linkedlist.integer a

The first number, without its leading zeros.

Guaranteed constraints:
0 ≤ a size ≤ 104,
0 ≤ element value ≤ 9999.

[input] linkedlist.integer b

The second number, without its leading zeros.

Guaranteed constraints:
0 ≤ b size ≤ 104,
0 ≤ element value ≤ 9999.

[output] linkedlist.integer

The result of adding a and b together, returned without leading zeros in the same format.
*/

// Singly-linked lists are already defined with this interface:
// class ListNode<T> {
//   ListNode(T x) {
//     value = x;
//   }
//   T value;
//   ListNode<T> next;
// }
//

ListNode<Integer> addTwoHugeNumbers(ListNode<Integer> a, ListNode<Integer> b) {
    Stack<Integer> first = new Stack<>();
    Stack<Integer> second = new Stack<>();
    Stack<Integer> sum = new Stack<>();
    
    ListNode<Integer> x = a;
    ListNode<Integer> y = b;
    ListNode<Integer> retVal = new ListNode<>(50);
    
    while(x != null){
        first.push(x.value);
        x = x.next;
    }
    while(y != null){
        second.push(y.value);
        y = y.next;
    }
    
    int add = 0;
    int left = 0;
    while(!first.isEmpty() && !second.isEmpty()){
        add = first.pop()+second.pop()+left;
        left = add/10000;
        add %= 10000;
        sum.push(add);
    }
    
    if(first.isEmpty() && !second.isEmpty()){
        while(!second.isEmpty()){
            add = second.pop() + left;
            left = add/10000;
            add %= 10000;
            sum.push(add);
        }
    }
    else if(second.isEmpty() && !first.isEmpty()){
        while(!first.isEmpty()){
            add = first.pop() + left;
            left = add/10000;
            add %= 10000;
            sum.push(add);
        }
    }
    
    if(left != 0){
        sum.push(left);
    }
    
    x = retVal;
    ListNode<Integer> temp;
    while(!sum.isEmpty()){
        temp = new ListNode<>(sum.pop());
        x.next = temp;
        x = x.next;
    }
    
    retVal = retVal.next;
    
    return retVal;
}

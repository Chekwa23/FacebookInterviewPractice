/*
Note: Your solution should have O(l1.length + l2.length) time complexity, since this is what you will be asked to accomplish in an interview.

Given two singly linked lists sorted in non-decreasing order, your task is to merge them. In other words, return a singly linked list, also sorted in non-decreasing order, that contains the elements from both original lists.

Example

For l1 = [1, 2, 3] and l2 = [4, 5, 6], the output should be
mergeTwoLinkedLists(l1, l2) = [1, 2, 3, 4, 5, 6];
For l1 = [1, 1, 2, 4] and l2 = [0, 3, 5], the output should be
mergeTwoLinkedLists(l1, l2) = [0, 1, 1, 2, 3, 4, 5].
Input/Output

[execution time limit] 3 seconds (java)

[input] linkedlist.integer l1

A singly linked list of integers.

Guaranteed constraints:
0 ≤ list size ≤ 104,
-109 ≤ element value ≤ 109.

[input] linkedlist.integer l2

A singly linked list of integers.

Guaranteed constraints:
0 ≤ list size ≤ 104,
-109 ≤ element value ≤ 109.

[output] linkedlist.integer

A list that contains elements from both l1 and l2, sorted in non-decreasing order.
*/

// Singly-linked lists are already defined with this interface:
// class ListNode<T> {
//   ListNode(T x) {
//     value = x;
//   }
//   T value;
//   ListNode<T> next;
// }
//
ListNode<Integer> mergeTwoLinkedLists(ListNode<Integer> l1, ListNode<Integer> l2) {

    ListNode<Integer> retVal = new ListNode<>(50);
    ListNode<Integer> ptr = retVal;
    ListNode<Integer> x = l1;
    ListNode<Integer> y = l2;
    ListNode<Integer> newNode;
    
    while(x != null && y != null){
        if(x.value < y.value){
            newNode = new ListNode<>(x.value);
            ptr.next = newNode;
            ptr = ptr.next;
            x = x.next;
        }
        else if(y.value < x.value){
            newNode = new ListNode<>(y.value);
            ptr.next = newNode;
            ptr = ptr.next;
            y = y.next;
        }
        else{
            newNode = new ListNode<>(x.value);
            ptr.next = newNode;
            ptr = ptr.next;
            x = x.next;
        }
    }
    if(x == null){
        while(y != null){
            newNode = new ListNode<>(y.value);
            ptr.next = newNode;
            ptr = ptr.next;
            y = y.next;
        }
    }
    else if(y == null){
        while(x != null){
            newNode = new ListNode<>(x.value);
            ptr.next = newNode;
            ptr = ptr.next;
            x = x.next;
        }
    }
    
    retVal = retVal.next;
    return retVal;
}


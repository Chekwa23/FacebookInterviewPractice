/*
Given an array of integers nums and an integer k, determine whether there are two distinct indices i and j in the array where nums[i] = nums[j] and the absolute difference between i and j is less than or equal to k.

Example

For nums = [0, 1, 2, 3, 5, 2] and k = 3, the output should be
containsCloseNums(nums, k) = true.

There are two 2s in nums, and the absolute difference between their positions is exactly 3.

For nums = [0, 1, 2, 3, 5, 2] and k = 2, the output should be
containsCloseNums(nums, k) = false.

The absolute difference between the positions of the two 2s is 3, which is more than k.

Input/Output

[execution time limit] 3 seconds (java)

[input] array.integer nums

Guaranteed constraints:
0 ≤ nums.length ≤ 55000,
-231 - 1 ≤ nums[i] ≤ 231 - 1.

[input] integer k

Guaranteed constraints:
0 ≤ k ≤ 35000.

[output] boolean
*/

boolean containsCloseNums(int[] nums, int k) {

    // HashMap<Integer, Integer> stuff = new HashMap<>();
    // boolean ret = false;

    // for(int i = 0; i < nums.length; i++){
    //     if(stuff.containsKey(nums[i])){
    //         if(i - stuff.get(nums[i]) > k){
    //             ret = false;
    //         }
    //         else{ret = true;}
    //     }
    //     stuff.put(nums[i], i);
    // }
    
    // return ret;
    
    HashMap<Integer, Integer> stuff = new HashMap<>();
    boolean ret = false;

    for(int i = 0; i < nums.length; i++){
        if(stuff.containsKey(nums[i])){
            if(i - stuff.get(nums[i]) <= k){
                ret = true;
            }
        }
        stuff.put(nums[i], i);
    }
    
    return ret;
    
    // HashMap<Integer, Integer> map = new HashMap<>();
    // for(int i =0; i< nums.length; i++){
    //     if(map.containsKey(nums[i])){
    //         if((i-map.get(nums[i]))<=k) return true;
    //         else map.put(nums[i],i); 
    //     }else{
    //     map.put(nums[i],i);
    //     }
    // }
    // return false;
}
